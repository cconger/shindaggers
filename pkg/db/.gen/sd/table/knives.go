//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Knives = newKnivesTable("sd", "knives", "")

type knivesTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	Name       mysql.ColumnString
	AuthorID   mysql.ColumnInteger
	CreatedAt  mysql.ColumnTimestamp
	UpdatedAt  mysql.ColumnTimestamp
	Rarity     mysql.ColumnString
	ImageName  mysql.ColumnString
	Deleted    mysql.ColumnBool
	ApprovedBy mysql.ColumnInteger
	ApprovedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type KnivesTable struct {
	knivesTable

	NEW knivesTable
}

// AS creates new KnivesTable with assigned alias
func (a KnivesTable) AS(alias string) *KnivesTable {
	return newKnivesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KnivesTable with assigned schema name
func (a KnivesTable) FromSchema(schemaName string) *KnivesTable {
	return newKnivesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KnivesTable with assigned table prefix
func (a KnivesTable) WithPrefix(prefix string) *KnivesTable {
	return newKnivesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KnivesTable with assigned table suffix
func (a KnivesTable) WithSuffix(suffix string) *KnivesTable {
	return newKnivesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKnivesTable(schemaName, tableName, alias string) *KnivesTable {
	return &KnivesTable{
		knivesTable: newKnivesTableImpl(schemaName, tableName, alias),
		NEW:         newKnivesTableImpl("", "new", ""),
	}
}

func newKnivesTableImpl(schemaName, tableName, alias string) knivesTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		NameColumn       = mysql.StringColumn("name")
		AuthorIDColumn   = mysql.IntegerColumn("author_id")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		UpdatedAtColumn  = mysql.TimestampColumn("updated_at")
		RarityColumn     = mysql.StringColumn("rarity")
		ImageNameColumn  = mysql.StringColumn("image_name")
		DeletedColumn    = mysql.BoolColumn("deleted")
		ApprovedByColumn = mysql.IntegerColumn("approved_by")
		ApprovedAtColumn = mysql.TimestampColumn("approved_at")
		allColumns       = mysql.ColumnList{IDColumn, NameColumn, AuthorIDColumn, CreatedAtColumn, UpdatedAtColumn, RarityColumn, ImageNameColumn, DeletedColumn, ApprovedByColumn, ApprovedAtColumn}
		mutableColumns   = mysql.ColumnList{NameColumn, AuthorIDColumn, CreatedAtColumn, UpdatedAtColumn, RarityColumn, ImageNameColumn, DeletedColumn, ApprovedByColumn, ApprovedAtColumn}
	)

	return knivesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		AuthorID:   AuthorIDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		Rarity:     RarityColumn,
		ImageName:  ImageNameColumn,
		Deleted:    DeletedColumn,
		ApprovedBy: ApprovedByColumn,
		ApprovedAt: ApprovedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
