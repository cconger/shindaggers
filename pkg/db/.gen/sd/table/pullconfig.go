//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Pullconfig = newPullconfigTable("sd", "pullconfig", "")

type pullconfigTable struct {
	mysql.Table

	// Columns
	CommunityID mysql.ColumnInteger
	Rarity      mysql.ColumnString
	Weight      mysql.ColumnInteger
	UpdatedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PullconfigTable struct {
	pullconfigTable

	NEW pullconfigTable
}

// AS creates new PullconfigTable with assigned alias
func (a PullconfigTable) AS(alias string) *PullconfigTable {
	return newPullconfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PullconfigTable with assigned schema name
func (a PullconfigTable) FromSchema(schemaName string) *PullconfigTable {
	return newPullconfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PullconfigTable with assigned table prefix
func (a PullconfigTable) WithPrefix(prefix string) *PullconfigTable {
	return newPullconfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PullconfigTable with assigned table suffix
func (a PullconfigTable) WithSuffix(suffix string) *PullconfigTable {
	return newPullconfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPullconfigTable(schemaName, tableName, alias string) *PullconfigTable {
	return &PullconfigTable{
		pullconfigTable: newPullconfigTableImpl(schemaName, tableName, alias),
		NEW:             newPullconfigTableImpl("", "new", ""),
	}
}

func newPullconfigTableImpl(schemaName, tableName, alias string) pullconfigTable {
	var (
		CommunityIDColumn = mysql.IntegerColumn("community_id")
		RarityColumn      = mysql.StringColumn("rarity")
		WeightColumn      = mysql.IntegerColumn("weight")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		allColumns        = mysql.ColumnList{CommunityIDColumn, RarityColumn, WeightColumn, UpdatedAtColumn}
		mutableColumns    = mysql.ColumnList{WeightColumn, UpdatedAtColumn}
	)

	return pullconfigTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CommunityID: CommunityIDColumn,
		Rarity:      RarityColumn,
		Weight:      WeightColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
