//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var ImageUploads = newImageUploadsTable("sd", "image_uploads", "")

type imageUploadsTable struct {
	mysql.Table

	// Columns
	UserID     mysql.ColumnInteger
	ImageID    mysql.ColumnInteger
	Path       mysql.ColumnString
	Uploadname mysql.ColumnString
	UploadedAt mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type ImageUploadsTable struct {
	imageUploadsTable

	NEW imageUploadsTable
}

// AS creates new ImageUploadsTable with assigned alias
func (a ImageUploadsTable) AS(alias string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageUploadsTable with assigned schema name
func (a ImageUploadsTable) FromSchema(schemaName string) *ImageUploadsTable {
	return newImageUploadsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageUploadsTable with assigned table prefix
func (a ImageUploadsTable) WithPrefix(prefix string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageUploadsTable with assigned table suffix
func (a ImageUploadsTable) WithSuffix(suffix string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageUploadsTable(schemaName, tableName, alias string) *ImageUploadsTable {
	return &ImageUploadsTable{
		imageUploadsTable: newImageUploadsTableImpl(schemaName, tableName, alias),
		NEW:               newImageUploadsTableImpl("", "new", ""),
	}
}

func newImageUploadsTableImpl(schemaName, tableName, alias string) imageUploadsTable {
	var (
		UserIDColumn     = mysql.IntegerColumn("user_id")
		ImageIDColumn    = mysql.IntegerColumn("image_id")
		PathColumn       = mysql.StringColumn("path")
		UploadnameColumn = mysql.StringColumn("uploadname")
		UploadedAtColumn = mysql.TimestampColumn("uploaded_at")
		allColumns       = mysql.ColumnList{UserIDColumn, ImageIDColumn, PathColumn, UploadnameColumn, UploadedAtColumn}
		mutableColumns   = mysql.ColumnList{UserIDColumn, PathColumn, UploadnameColumn, UploadedAtColumn}
	)

	return imageUploadsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:     UserIDColumn,
		ImageID:    ImageIDColumn,
		Path:       PathColumn,
		Uploadname: UploadnameColumn,
		UploadedAt: UploadedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
