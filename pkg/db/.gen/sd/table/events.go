//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Events = newEventsTable("sd", "events", "")

type eventsTable struct {
	mysql.Table

	// Columns
	EventID     mysql.ColumnInteger
	Name        mysql.ColumnString
	Slug        mysql.ColumnString
	Description mysql.ColumnString
	CreatedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type EventsTable struct {
	eventsTable

	NEW eventsTable
}

// AS creates new EventsTable with assigned alias
func (a EventsTable) AS(alias string) *EventsTable {
	return newEventsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventsTable with assigned schema name
func (a EventsTable) FromSchema(schemaName string) *EventsTable {
	return newEventsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventsTable with assigned table prefix
func (a EventsTable) WithPrefix(prefix string) *EventsTable {
	return newEventsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventsTable with assigned table suffix
func (a EventsTable) WithSuffix(suffix string) *EventsTable {
	return newEventsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventsTable(schemaName, tableName, alias string) *EventsTable {
	return &EventsTable{
		eventsTable: newEventsTableImpl(schemaName, tableName, alias),
		NEW:         newEventsTableImpl("", "new", ""),
	}
}

func newEventsTableImpl(schemaName, tableName, alias string) eventsTable {
	var (
		EventIDColumn     = mysql.IntegerColumn("event_id")
		NameColumn        = mysql.StringColumn("name")
		SlugColumn        = mysql.StringColumn("slug")
		DescriptionColumn = mysql.StringColumn("description")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		allColumns        = mysql.ColumnList{EventIDColumn, NameColumn, SlugColumn, DescriptionColumn, CreatedAtColumn}
		mutableColumns    = mysql.ColumnList{NameColumn, SlugColumn, DescriptionColumn, CreatedAtColumn}
	)

	return eventsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		EventID:     EventIDColumn,
		Name:        NameColumn,
		Slug:        SlugColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
