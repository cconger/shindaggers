//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var UserAuth = newUserAuthTable("sd", "user_auth", "")

type userAuthTable struct {
	mysql.Table

	// Columns
	UserID       mysql.ColumnInteger
	Token        mysql.ColumnString
	AccessToken  mysql.ColumnString
	RefreshToken mysql.ColumnString
	ExpiresAt    mysql.ColumnTimestamp
	CreatedAt    mysql.ColumnTimestamp
	UpdatedAt    mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type UserAuthTable struct {
	userAuthTable

	NEW userAuthTable
}

// AS creates new UserAuthTable with assigned alias
func (a UserAuthTable) AS(alias string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserAuthTable with assigned schema name
func (a UserAuthTable) FromSchema(schemaName string) *UserAuthTable {
	return newUserAuthTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserAuthTable with assigned table prefix
func (a UserAuthTable) WithPrefix(prefix string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserAuthTable with assigned table suffix
func (a UserAuthTable) WithSuffix(suffix string) *UserAuthTable {
	return newUserAuthTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserAuthTable(schemaName, tableName, alias string) *UserAuthTable {
	return &UserAuthTable{
		userAuthTable: newUserAuthTableImpl(schemaName, tableName, alias),
		NEW:           newUserAuthTableImpl("", "new", ""),
	}
}

func newUserAuthTableImpl(schemaName, tableName, alias string) userAuthTable {
	var (
		UserIDColumn       = mysql.IntegerColumn("user_id")
		TokenColumn        = mysql.StringColumn("token")
		AccessTokenColumn  = mysql.StringColumn("access_token")
		RefreshTokenColumn = mysql.StringColumn("refresh_token")
		ExpiresAtColumn    = mysql.TimestampColumn("expires_at")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		UpdatedAtColumn    = mysql.TimestampColumn("updated_at")
		allColumns         = mysql.ColumnList{UserIDColumn, TokenColumn, AccessTokenColumn, RefreshTokenColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = mysql.ColumnList{UserIDColumn, AccessTokenColumn, RefreshTokenColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userAuthTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		Token:        TokenColumn,
		AccessToken:  AccessTokenColumn,
		RefreshToken: RefreshTokenColumn,
		ExpiresAt:    ExpiresAtColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
