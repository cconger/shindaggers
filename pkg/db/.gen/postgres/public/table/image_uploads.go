//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ImageUploads = newImageUploadsTable("public", "image_uploads", "")

type imageUploadsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UploadName postgres.ColumnString
	UserID     postgres.ColumnInteger
	Imagepath  postgres.ColumnString
	UploadedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ImageUploadsTable struct {
	imageUploadsTable

	EXCLUDED imageUploadsTable
}

// AS creates new ImageUploadsTable with assigned alias
func (a ImageUploadsTable) AS(alias string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ImageUploadsTable with assigned schema name
func (a ImageUploadsTable) FromSchema(schemaName string) *ImageUploadsTable {
	return newImageUploadsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ImageUploadsTable with assigned table prefix
func (a ImageUploadsTable) WithPrefix(prefix string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ImageUploadsTable with assigned table suffix
func (a ImageUploadsTable) WithSuffix(suffix string) *ImageUploadsTable {
	return newImageUploadsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newImageUploadsTable(schemaName, tableName, alias string) *ImageUploadsTable {
	return &ImageUploadsTable{
		imageUploadsTable: newImageUploadsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newImageUploadsTableImpl("", "excluded", ""),
	}
}

func newImageUploadsTableImpl(schemaName, tableName, alias string) imageUploadsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UploadNameColumn = postgres.StringColumn("upload_name")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		ImagepathColumn  = postgres.StringColumn("imagepath")
		UploadedAtColumn = postgres.TimestampColumn("uploaded_at")
		allColumns       = postgres.ColumnList{IDColumn, UploadNameColumn, UserIDColumn, ImagepathColumn, UploadedAtColumn}
		mutableColumns   = postgres.ColumnList{UploadNameColumn, UserIDColumn, ImagepathColumn, UploadedAtColumn}
	)

	return imageUploadsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UploadName: UploadNameColumn,
		UserID:     UserIDColumn,
		Imagepath:  ImagepathColumn,
		UploadedAt: UploadedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
