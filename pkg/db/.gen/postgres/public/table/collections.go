//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Collections = newCollectionsTable("public", "collections", "")

type collectionsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	Weights   postgres.ColumnString
	CreatorID postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	ActiveAt  postgres.ColumnTimestamp
	RetiredAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectionsTable struct {
	collectionsTable

	EXCLUDED collectionsTable
}

// AS creates new CollectionsTable with assigned alias
func (a CollectionsTable) AS(alias string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionsTable with assigned schema name
func (a CollectionsTable) FromSchema(schemaName string) *CollectionsTable {
	return newCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionsTable with assigned table prefix
func (a CollectionsTable) WithPrefix(prefix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionsTable with assigned table suffix
func (a CollectionsTable) WithSuffix(suffix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionsTable(schemaName, tableName, alias string) *CollectionsTable {
	return &CollectionsTable{
		collectionsTable: newCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newCollectionsTableImpl("", "excluded", ""),
	}
}

func newCollectionsTableImpl(schemaName, tableName, alias string) collectionsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		WeightsColumn   = postgres.StringColumn("weights")
		CreatorIDColumn = postgres.IntegerColumn("creator_id")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		ActiveAtColumn  = postgres.TimestampColumn("active_at")
		RetiredAtColumn = postgres.TimestampColumn("retired_at")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, WeightsColumn, CreatorIDColumn, CreatedAtColumn, UpdatedAtColumn, ActiveAtColumn, RetiredAtColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, WeightsColumn, CreatorIDColumn, CreatedAtColumn, UpdatedAtColumn, ActiveAtColumn, RetiredAtColumn}
	)

	return collectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Weights:   WeightsColumn,
		CreatorID: CreatorIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		ActiveAt:  ActiveAtColumn,
		RetiredAt: RetiredAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
