//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CollectableInstances = newCollectableInstancesTable("public", "collectable_instances", "")

type collectableInstancesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	CollectableID postgres.ColumnInteger
	OwnerID       postgres.ColumnInteger
	EditionID     postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestamp
	DeletedAt     postgres.ColumnTimestamp
	Tags          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectableInstancesTable struct {
	collectableInstancesTable

	EXCLUDED collectableInstancesTable
}

// AS creates new CollectableInstancesTable with assigned alias
func (a CollectableInstancesTable) AS(alias string) *CollectableInstancesTable {
	return newCollectableInstancesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectableInstancesTable with assigned schema name
func (a CollectableInstancesTable) FromSchema(schemaName string) *CollectableInstancesTable {
	return newCollectableInstancesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectableInstancesTable with assigned table prefix
func (a CollectableInstancesTable) WithPrefix(prefix string) *CollectableInstancesTable {
	return newCollectableInstancesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectableInstancesTable with assigned table suffix
func (a CollectableInstancesTable) WithSuffix(suffix string) *CollectableInstancesTable {
	return newCollectableInstancesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectableInstancesTable(schemaName, tableName, alias string) *CollectableInstancesTable {
	return &CollectableInstancesTable{
		collectableInstancesTable: newCollectableInstancesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newCollectableInstancesTableImpl("", "excluded", ""),
	}
}

func newCollectableInstancesTableImpl(schemaName, tableName, alias string) collectableInstancesTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		CollectableIDColumn = postgres.IntegerColumn("collectable_id")
		OwnerIDColumn       = postgres.IntegerColumn("owner_id")
		EditionIDColumn     = postgres.IntegerColumn("edition_id")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		DeletedAtColumn     = postgres.TimestampColumn("deleted_at")
		TagsColumn          = postgres.StringColumn("tags")
		allColumns          = postgres.ColumnList{IDColumn, CollectableIDColumn, OwnerIDColumn, EditionIDColumn, CreatedAtColumn, DeletedAtColumn, TagsColumn}
		mutableColumns      = postgres.ColumnList{CollectableIDColumn, OwnerIDColumn, EditionIDColumn, CreatedAtColumn, DeletedAtColumn, TagsColumn}
	)

	return collectableInstancesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CollectableID: CollectableIDColumn,
		OwnerID:       OwnerIDColumn,
		EditionID:     EditionIDColumn,
		CreatedAt:     CreatedAtColumn,
		DeletedAt:     DeletedAtColumn,
		Tags:          TagsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
