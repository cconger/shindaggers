//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Collectables = newCollectablesTable("public", "collectables", "")

type collectablesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	CollectionID postgres.ColumnInteger
	CreatorID    postgres.ColumnInteger
	Rarity       postgres.ColumnString
	Imagepath    postgres.ColumnString
	ApprovedAt   postgres.ColumnTimestamp
	ApprovedBy   postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestamp
	DeletedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectablesTable struct {
	collectablesTable

	EXCLUDED collectablesTable
}

// AS creates new CollectablesTable with assigned alias
func (a CollectablesTable) AS(alias string) *CollectablesTable {
	return newCollectablesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectablesTable with assigned schema name
func (a CollectablesTable) FromSchema(schemaName string) *CollectablesTable {
	return newCollectablesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectablesTable with assigned table prefix
func (a CollectablesTable) WithPrefix(prefix string) *CollectablesTable {
	return newCollectablesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectablesTable with assigned table suffix
func (a CollectablesTable) WithSuffix(suffix string) *CollectablesTable {
	return newCollectablesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectablesTable(schemaName, tableName, alias string) *CollectablesTable {
	return &CollectablesTable{
		collectablesTable: newCollectablesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCollectablesTableImpl("", "excluded", ""),
	}
}

func newCollectablesTableImpl(schemaName, tableName, alias string) collectablesTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		CollectionIDColumn = postgres.IntegerColumn("collection_id")
		CreatorIDColumn    = postgres.IntegerColumn("creator_id")
		RarityColumn       = postgres.StringColumn("rarity")
		ImagepathColumn    = postgres.StringColumn("imagepath")
		ApprovedAtColumn   = postgres.TimestampColumn("approved_at")
		ApprovedByColumn   = postgres.IntegerColumn("approved_by")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		DeletedAtColumn    = postgres.TimestampColumn("deleted_at")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, CollectionIDColumn, CreatorIDColumn, RarityColumn, ImagepathColumn, ApprovedAtColumn, ApprovedByColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, CollectionIDColumn, CreatorIDColumn, RarityColumn, ImagepathColumn, ApprovedAtColumn, ApprovedByColumn, CreatedAtColumn, DeletedAtColumn}
	)

	return collectablesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		CollectionID: CollectionIDColumn,
		CreatorID:    CreatorIDColumn,
		Rarity:       RarityColumn,
		Imagepath:    ImagepathColumn,
		ApprovedAt:   ApprovedAtColumn,
		ApprovedBy:   ApprovedByColumn,
		CreatedAt:    CreatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
