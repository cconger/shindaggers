//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserTokens = newUserTokensTable("public", "user_tokens", "")

type userTokensTable struct {
	postgres.Table

	// Columns
	UserID       postgres.ColumnInteger
	Token        postgres.ColumnString
	AccessToken  postgres.ColumnString
	RefreshToken postgres.ColumnString
	ExpiresAt    postgres.ColumnTimestamp
	CreatedAt    postgres.ColumnTimestamp
	UpdatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTokensTable struct {
	userTokensTable

	EXCLUDED userTokensTable
}

// AS creates new UserTokensTable with assigned alias
func (a UserTokensTable) AS(alias string) *UserTokensTable {
	return newUserTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTokensTable with assigned schema name
func (a UserTokensTable) FromSchema(schemaName string) *UserTokensTable {
	return newUserTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTokensTable with assigned table prefix
func (a UserTokensTable) WithPrefix(prefix string) *UserTokensTable {
	return newUserTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTokensTable with assigned table suffix
func (a UserTokensTable) WithSuffix(suffix string) *UserTokensTable {
	return newUserTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTokensTable(schemaName, tableName, alias string) *UserTokensTable {
	return &UserTokensTable{
		userTokensTable: newUserTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newUserTokensTableImpl("", "excluded", ""),
	}
}

func newUserTokensTableImpl(schemaName, tableName, alias string) userTokensTable {
	var (
		UserIDColumn       = postgres.IntegerColumn("user_id")
		TokenColumn        = postgres.StringColumn("token")
		AccessTokenColumn  = postgres.StringColumn("access_token")
		RefreshTokenColumn = postgres.StringColumn("refresh_token")
		ExpiresAtColumn    = postgres.TimestampColumn("expires_at")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampColumn("updated_at")
		allColumns         = postgres.ColumnList{UserIDColumn, TokenColumn, AccessTokenColumn, RefreshTokenColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, AccessTokenColumn, RefreshTokenColumn, ExpiresAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:       UserIDColumn,
		Token:        TokenColumn,
		AccessToken:  AccessTokenColumn,
		RefreshToken: RefreshTokenColumn,
		ExpiresAt:    ExpiresAtColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
